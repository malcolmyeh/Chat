{"version":3,"sources":["SendMessage.js","App.js","serviceWorker.js","index.js"],"names":["SendMessage","state","text","name","handleNameChange","e","_this","setState","target","value","handleTextChange","handleTextSubmit","preventDefault","pushDB","message","username","firebase","database","ref","push","time","Date","now","toString","react_default","a","createElement","type","onChange","this","onSubmit","Component","App","messages","date","getMessages","limitToLast","on","snapshot","newMessages","forEach","child","val","id","key","bottomSpan","scrollIntoView","behavior","getTime","currenttime","messagetime","Math","floor","renderMessages","map","align","_this2","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","interval","setInterval","updateClock","clearInterval","_this3","className","class","href","src_SendMessage","sendmessage","el","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRA6DeA,6MAzDbC,MAAQ,CACNC,KAAM,GACNC,KAAM,eAERC,iBAAmB,SAAAC,GACjBC,EAAKC,SAAS,CACZJ,KAAME,EAAEG,OAAOC,WAGnBC,iBAAmB,SAAAL,GACjBC,EAAKC,SAAS,CACZL,KAAMG,EAAEG,OAAOC,WAGnBE,iBAAmB,SAAAN,GAEjB,GADAA,EAAEO,iBACsB,KAApBN,EAAKL,MAAMC,KACb,OAAO,EAETI,EAAKO,OAAOP,EAAKL,MAAMC,KAAMI,EAAKL,MAAME,MACxCG,EAAKC,SAAS,CACZL,KAAM,QAGVW,OAAS,SAACC,EAASC,GACjBC,IACGC,WACAC,IAAI,aACJC,KAAK,CACJjB,KAAMY,EACNX,KAAMY,EACNK,KAAMC,KAAKC,MAAMC,sFAIrB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,SAAUC,KAAKzB,iBACfK,MAAOoB,KAAK5B,MAAME,QAGtBqB,EAAAC,EAAAC,cAAA,QAAMI,SAAUD,KAAKlB,kBACnBa,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,SAAUC,KAAKnB,iBACfD,MAAOoB,KAAK5B,MAAMC,gBAnDJ6B,aCyGXC,6MAtGb/B,MAAQ,CACNgC,SAAU,GACVC,KAAM,IAAIb,QAwBZc,YAAc,WACZnB,IACGC,WACAC,IAAI,aACJkB,YAAY,KACZC,GAAG,QAAS,SAAAC,GACX,IAAIC,EAAc,GAClBD,EAASE,QAAQ,SAAAC,GACf,IAAI3B,EAAU2B,EAAMC,MACpBH,EAAYpB,KAAK,CACfwB,GAAIF,EAAMG,IACV1C,KAAMY,EAAQZ,KACdC,KAAMW,EAAQX,KACdiB,KAAMN,EAAQM,SAGlBd,EAAKC,SAAS,CAAE0B,SAAUM,IAC1BjC,EAAKuC,WAAWC,eAAe,CAAEC,SAAU,gBAIjDC,QAAU,SAACC,EAAaC,GACtB,OAAIC,KAAKC,OAAOH,EAAcC,GAAe,KAAS,EAC7C,eACqD,GAAnDC,KAAKC,OAAOH,EAAcC,GAAe,KAC3C,eACEC,KAAKC,OAAOH,EAAcC,GAAe,KAAS,GACpDC,KAAKC,OAAOH,EAAcC,GAAe,KAAS,eACK,GAArDC,KAAKC,OAAOH,EAAcC,GAAe,MAC3C,YACEC,KAAKC,OAAOH,EAAcC,GAAe,MAAW,GACtDC,KAAKC,OAAOH,EAAcC,GAAe,MAAW,aACI,GAAtDC,KAAKC,OAAOH,EAAcC,GAAe,OAC3C,aAEAC,KAAKC,OAAOH,EAAcC,GAAe,OAAY,eAIhEG,eAAiB,WACf,OAAO/C,EAAKL,MAAMgC,SAASqB,IAAI,SAAAxC,GAAO,OACpCU,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAG6B,MAAM,QAAQzC,EAAQX,KAAO,KAAOW,EAAQZ,MAC/CsB,EAAAC,EAAAC,cAAA,KAAG6B,MAAM,SACN,QAAUjD,EAAK0C,QAAQ1C,EAAKL,MAAMiC,KAAMpB,EAAQM,8FAjErC,IAAAoC,EAAA3B,KASlBb,IAASyC,cARI,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,iBAGrBlC,KAAKM,cACLN,KAAKmC,SAAWC,YAAY,kBAAMT,EAAKU,eAAe,oDAGtDC,cAActC,KAAKmC,gDAGnBnC,KAAKtB,SAAS,CACZ2B,KAAM,IAAIb,wCAqDL,IAAA+C,EAAAvC,KACP,OACEL,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,OACb7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAK4C,MAAM,UACT9C,EAAAC,EAAAC,cAAA,KAAG6C,KAAK,IAAID,MAAM,cAAlB,sBAGA9C,EAAAC,EAAAC,cAAA,MAAIiB,GAAG,aAAa2B,MAAM,8BACxB9C,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAG6C,KAAK,sCAAR,mBAKR/C,EAAAC,EAAAC,cAAA,WAEGG,KAAKwB,iBACN7B,EAAAC,EAAAC,cAAC8C,EAAD,CAAaC,aAAW,KAE1BjD,EAAAC,EAAAC,cAAA,QAAMR,IAAK,SAAAwD,GAAE,OAAKN,EAAKvB,WAAa6B,aAjG1B3C,aCOE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.776f554e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nclass SendMessage extends Component {\r\n  state = {\r\n    text: \"\",\r\n    name: \"Anonymous\"\r\n  };\r\n  handleNameChange = e => {\r\n    this.setState({\r\n      name: e.target.value\r\n    });\r\n  };\r\n  handleTextChange = e => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  };\r\n  handleTextSubmit = e => {\r\n    e.preventDefault();\r\n    if (this.state.text === \"\") {\r\n      return false;\r\n    }\r\n    this.pushDB(this.state.text, this.state.name);\r\n    this.setState({\r\n      text: \"\"\r\n    });\r\n  };\r\n  pushDB = (message, username) => {\r\n    firebase\r\n      .database()\r\n      .ref(\"messages/\")\r\n      .push({\r\n        text: message,\r\n        name: username,\r\n        time: Date.now().toString()\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <label>Name: </label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleNameChange}\r\n            value={this.state.name}\r\n          />\r\n        </form>\r\n        <form onSubmit={this.handleTextSubmit}>\r\n          <label>Enter message: </label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleTextChange}\r\n            value={this.state.text}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SendMessage;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport firebase from \"firebase\";\nimport SendMessage from \"./SendMessage\";\n\nclass App extends Component {\n  state = {\n    messages: [],\n    date: new Date()\n  };\n\n  componentDidMount() {\n    var config = {\n      apiKey: \"AIzaSyBQ54OB7Rtu3OAh32yqQvnELLvGC3QiYT8\",\n      authDomain: \"anon-chat-23407.firebaseapp.com\",\n      databaseURL: \"https://anon-chat-23407.firebaseio.com\",\n      projectId: \"anon-chat-23407\",\n      storageBucket: \"anon-chat-23407.appspot.com\",\n      messagingSenderId: \"531896225805\"\n    };\n    firebase.initializeApp(config);\n    this.getMessages();\n    this.interval = setInterval(() => this.updateClock(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  updateClock() {\n    this.setState({\n      date: new Date()\n    });\n  }\n  getMessages = () => {\n    firebase\n      .database()\n      .ref(\"messages/\")\n      .limitToLast(100)\n      .on(\"value\", snapshot => {\n        let newMessages = [];\n        snapshot.forEach(child => {\n          var message = child.val();\n          newMessages.push({\n            id: child.key,\n            text: message.text,\n            name: message.name,\n            time: message.time\n          });\n        });\n        this.setState({ messages: newMessages });\n        this.bottomSpan.scrollIntoView({ behavior: \"smooth\" });\n      });\n  };\n\n  getTime = (currenttime, messagetime) => {\n    if (Math.floor((currenttime - messagetime) / 60000) < 1) {\n      return \" moments ago\";\n    } else if (Math.floor((currenttime - messagetime) / 60000) == 1) {\n      return 1 + \" minute ago\";\n    } else if (Math.floor((currenttime - messagetime) / 60000) < 60) {\n      return Math.floor((currenttime - messagetime) / 60000) + \" minutes ago\";\n    } else if (Math.floor((currenttime - messagetime) / 3600000) == 1) {\n      return 1 + \"hour ago\";\n    } else if (Math.floor((currenttime - messagetime) / 3600000) < 25) {\n      return Math.floor((currenttime - messagetime) / 3600000) + \" hours ago\";\n    } else if (Math.floor((currenttime - messagetime) / 86400000) == 1) {\n      return 1 + \"hours ago\";\n    } else {\n      return Math.floor((currenttime - messagetime) / 86400000) + \" days ago\";\n    }\n  };\n\n  renderMessages = () => {\n    return this.state.messages.map(message => (\n      <div>\n        <p align=\"left\">{message.name + \": \" + message.text}</p>\n        <p align=\"right\">\n          {\"sent \" + this.getTime(this.state.date, message.time)}\n        </p>\n      </div>\n    ));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav>\n          <div class=\"navbar\">\n            <a href=\"#\" class=\"brand-logo\">\n              Anonymous Chatroom\n            </a>\n            <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n              <li>\n                <a href=\"https://github.com/malcolmyeh/Chat\">Source Code</a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <div>\n          {/*<h2>Anonymous Chatroom</h2>*/}\n          {this.renderMessages()}\n          <SendMessage sendmessage />\n        </div>\n        <span ref={el => (this.bottomSpan = el)} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}