{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","text","name","messages","onSubmit","event","charCode","_this","trim","console","log","setState","pushDB","message","username","firebase","database","ref","push","time","Date","now","getMessages","limitToLast","on","snapshot","newMessages","forEach","child","val","id","key","renderMessages","map","react_default","a","createElement","index_es","toString","split","handleNameChange","e","content","target","value","handleSubmit","preventDefault","props","addTask","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","this","_this2","className","required","label","onChange","style","width","overflow","placeholder","multiline","onKeyPress","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAwGeA,6MAjGdC,MAAQ,CACNC,KAAM,GACNC,KAAM,YACNC,SAAU,MAeZC,SAAW,SAAAC,GACc,KAAnBA,EAAMC,UAA8C,KAA3BC,EAAKP,MAAMC,KAAKO,SAC3CC,QAAQC,IAAIH,EAAKP,MAAMC,MACvBM,EAAKI,SAAS,CAAEV,KAAM,KACtBM,EAAKK,OAAOL,EAAKP,MAAMC,KAAMM,EAAKP,MAAME,UAI3CU,OAAS,SAACC,EAASC,GAClBC,IAASC,WAAWC,IAAI,aAAaC,KAAK,CACxCjB,KAAMY,EACNX,KAAMY,EACNK,KAAMC,KAAKA,KAAKC,YAIpBC,YAAc,WACZP,IAASC,WAAWC,IAAI,aAAaM,YAAY,IAAIC,GAAG,QAAS,SAAAC,GAC/D,IAAIC,EAAc,GAClBD,EAASE,QAAQ,SAAAC,GACf,IAAIf,EAAUe,EAAMC,MACpBH,EAAYR,KAAK,CAAEY,GAAIF,EAAMG,IAAK9B,KAAMY,EAAQZ,KAAMC,KAAMW,EAAQX,KAAMiB,KAAMN,EAAQM,SAE1FZ,EAAKI,SAAS,CAACR,SAAUuB,SAI7BM,eAAiB,WACf,OAAOzB,EAAKP,MAAMG,SAAS8B,IAAI,SAAApB,GAAO,OACpCqB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGxB,EAAQX,KAAO,KAAOW,EAAQZ,MAEjCiC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACC,WAAaxB,EAAQM,KAAKmB,WAAWC,MAAM,KAAK,UAKvDC,iBAAmB,SAACC,GAClBlC,EAAKI,SAAS,CACV+B,QAASD,EAAEE,OAAOC,WAGxBC,aAAe,SAACJ,GACZA,EAAEK,iBACFvC,EAAKwC,MAAMC,QAAQzC,EAAKP,OACxBO,EAAKI,SAAS,CACV+B,QAAS,yFApDf3B,IAASkC,cARI,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,iBAGrBC,KAAKlC,+CAsDE,IAAAmC,EAAAD,KACP,OACEtB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEsB,UAAQ,EACRC,MAAM,OACNC,SAAU,SAAAxD,GAAK,OAAIoD,EAAK9C,SAAS,CAAET,KAAMG,EAAMsC,OAAOC,SACtDA,MAAOY,KAAKxD,MAAME,KAClB4D,MAAO,CAAEC,MAAO,OAAQC,SAAU,YAEpC9B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGmB,KAAKxB,kBAERE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE4B,YAAY,0BACZL,MAAM,kBACNM,WAAW,EACXL,SAAU,SAAAxD,GAAK,OAAIoD,EAAK9C,SAAS,CAAEV,KAAMI,EAAMsC,OAAOC,SACtDA,MAAOY,KAAKxD,MAAMC,KAClBkE,WAAYX,KAAKpD,SACjB0D,MAAO,CAAEC,MAAO,OAAQC,SAAU,oBA3FzBI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13c626f0.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport \"./App.css\"\nimport firebase from \"firebase\"\nimport { ListItem, ListItemText, TextField, List } from \"@material-ui/core\"\n\n\nclass App extends Component {\n state = {\n   text: \"\",\n   name: \"Anonymous\",\n   messages: []\n }\n  componentDidMount(){\n   var config = {\n     apiKey: \"AIzaSyBQ54OB7Rtu3OAh32yqQvnELLvGC3QiYT8\",\n     authDomain: \"anon-chat-23407.firebaseapp.com\",\n     databaseURL: \"https://anon-chat-23407.firebaseio.com\",\n     projectId: \"anon-chat-23407\",\n     storageBucket: \"anon-chat-23407.appspot.com\",\n     messagingSenderId: \"531896225805\"\n   };\n   firebase.initializeApp(config);\n   this.getMessages()\n }\n\n onSubmit = event => {\n   if (event.charCode === 13 && this.state.text.trim() !== \"\"){ //if enter\n     console.log(this.state.text)\n     this.setState({ text: \"\"})\n     this.pushDB(this.state.text, this.state.name)\n\n   }\n }\n  pushDB = (message, username) => {\n   firebase.database().ref(\"messages/\").push({\n     text: message,\n     name: username,\n     time: Date(Date.now())\n   })\n }\n\n getMessages = () => {\n   firebase.database().ref(\"messages/\").limitToLast(15).on(\"value\", snapshot =>{\n     let newMessages = []\n     snapshot.forEach(child => {\n       var message = child.val()\n       newMessages.push({ id: child.key, text: message.text, name: message.name, time: message.time})\n     })\n     this.setState({messages: newMessages})\n   })\n }\n\n renderMessages = () => {\n   return this.state.messages.map(message => (\n     <ListItem>\n       <ListItemText>\n         {message.name + \": \" + message.text}    \n       </ListItemText>\n       <ListItemText>\n       {\"sent at \" + message.time.toString().split(' ')[4]}\n       </ListItemText>\n     </ListItem>\n   ))\n }\n handleNameChange = (e) => {\n   this.setState({\n       content: e.target.value\n   })\n }\n handleSubmit = (e) => {\n     e.preventDefault();\n     this.props.addTask(this.state);\n     this.setState({\n         content: ''\n     })\n }\n render() {\n   return (\n     <div className=\"App\">\n       <h1>AnonChat</h1>\n       <TextField\n         required\n         label=\"Name\"\n         onChange={event => this.setState({ name: event.target.value })}\n         value={this.state.name}\n         style={{ width: \"98vw\", overflow: \"hidden\" }}\n       />\n       <List>\n         {this.renderMessages()}\n       </List>\n       <TextField\n         placeholder=\"Press ENTER to submit. \"\n         label=\"Enter text here\"       \n         multiline={true}\n         onChange={event => this.setState({ text: event.target.value })}\n         value={this.state.text}\n         onKeyPress={this.onSubmit}\n         style={{ width: \"98vw\", overflow: \"hidden\" }}\n       /> \n     </div>\n   )\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}