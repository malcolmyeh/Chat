{"version":3,"sources":["SendMessage.js","App.js","serviceWorker.js","index.js"],"names":["SendMessage","state","text","name","handleNameChange","e","_this","setState","target","value","handleTextChange","handleTextSubmit","preventDefault","pushDB","message","username","firebase","database","ref","push","time","Date","now","toString","react_default","a","createElement","type","onChange","this","onSubmit","Component","App","messages","getMessages","limitToLast","on","snapshot","newMessages","forEach","child","val","id","key","renderMessages","map","index_es","Math","floor","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","className","src_SendMessage","sendmessage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSA0DeA,6MAtDbC,MAAQ,CACNC,KAAM,GACNC,KAAM,eAERC,iBAAmB,SAAAC,GACjBC,EAAKC,SAAS,CACZJ,KAAME,EAAEG,OAAOC,WAGnBC,iBAAmB,SAAAL,GACjBC,EAAKC,SAAS,CACZL,KAAMG,EAAEG,OAAOC,WAGnBE,iBAAmB,SAAAN,GACjBA,EAAEO,iBACFN,EAAKO,OAAOP,EAAKL,MAAMC,KAAMI,EAAKL,MAAME,MACxCG,EAAKC,SAAS,CACZL,KAAM,QAGVW,OAAS,SAACC,EAASC,GACjBC,IACGC,WACAC,IAAI,aACJC,KAAK,CACJjB,KAAMY,EACNX,KAAMY,EACNK,KAAMC,KAAKC,MAAMC,sFAIrB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,SAAUC,KAAKzB,iBACfK,MAAOoB,KAAK5B,MAAME,QAGtBqB,EAAAC,EAAAC,cAAA,QAAMI,SAAUD,KAAKlB,kBACnBa,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,SAAUC,KAAKnB,iBACfD,MAAOoB,KAAK5B,MAAMC,gBAhDJ6B,qBC+DXC,6MA1Db/B,MAAQ,CACNgC,SAAU,MAeZC,YAAc,WACZlB,IACGC,WACAC,IAAI,aACJiB,YAAY,IACZC,GAAG,QAAS,SAAAC,GACX,IAAIC,EAAc,GAClBD,EAASE,QAAQ,SAAAC,GACf,IAAI1B,EAAU0B,EAAMC,MACpBH,EAAYnB,KAAK,CACfuB,GAAIF,EAAMG,IACVzC,KAAMY,EAAQZ,KACdC,KAAMW,EAAQX,KACdiB,KAAMN,EAAQM,SAGlBd,EAAKC,SAAS,CAAE0B,SAAUK,SAIhCM,eAAiB,WACf,OAAOtC,EAAKL,MAAMgC,SAASY,IAAI,SAAA/B,GAAO,OACpCU,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KAAehC,EAAQX,KAAO,KAAOW,EAAQZ,MAC7CsB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACKC,KAAKC,OAAO3B,KAAKC,MAAMR,EAAQM,MAAM,KAAS,uGA7BvDJ,IAASiC,cARI,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,iBAGrB1B,KAAKK,+CAmCL,OACEV,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAC+B,EAAD,CAAaC,aAAW,IACxBlC,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KAAOjB,KAAKe,0BAtDFb,aCME4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1f7700c8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nclass SendMessage extends Component {\r\n  state = {\r\n    text: \"\",\r\n    name: \"Anonymous\"\r\n  };\r\n  handleNameChange = e => {\r\n    this.setState({\r\n      name: e.target.value\r\n    });\r\n  };\r\n  handleTextChange = e => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  };\r\n  handleTextSubmit = e => {\r\n    e.preventDefault();\r\n    this.pushDB(this.state.text, this.state.name);\r\n    this.setState({\r\n      text: \"\"\r\n    });\r\n  };\r\n  pushDB = (message, username) => {\r\n    firebase\r\n      .database()\r\n      .ref(\"messages/\")\r\n      .push({\r\n        text: message,\r\n        name: username,\r\n        time: Date.now().toString()\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <label>Name: </label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleNameChange}\r\n            value={this.state.name}\r\n          />\r\n        </form>\r\n        <form onSubmit={this.handleTextSubmit}>\r\n          <label>Enter message: </label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleTextChange}\r\n            value={this.state.text}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SendMessage;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport firebase from \"firebase\";\nimport SendMessage from \"./SendMessage\";\nimport { ListItem, ListItemText, TextField, List } from \"@material-ui/core\";\n\nclass App extends Component {\n\n  state = {\n    messages: []\n  };\n  componentDidMount() {\n    var config = {\n      apiKey: \"AIzaSyBQ54OB7Rtu3OAh32yqQvnELLvGC3QiYT8\",\n      authDomain: \"anon-chat-23407.firebaseapp.com\",\n      databaseURL: \"https://anon-chat-23407.firebaseio.com\",\n      projectId: \"anon-chat-23407\",\n      storageBucket: \"anon-chat-23407.appspot.com\",\n      messagingSenderId: \"531896225805\"\n    };\n    firebase.initializeApp(config);\n    this.getMessages();\n  }\n\n  getMessages = () => {\n    firebase\n      .database()\n      .ref(\"messages/\")\n      .limitToLast(15)\n      .on(\"value\", snapshot => {\n        let newMessages = [];\n        snapshot.forEach(child => {\n          var message = child.val();\n          newMessages.push({\n            id: child.key,\n            text: message.text,\n            name: message.name,\n            time: message.time\n          });\n        });\n        this.setState({ messages: newMessages });\n      });\n  };\n\n  renderMessages = () => {\n    return this.state.messages.map(message => (\n      <ListItem>\n        <ListItemText>{message.name + \": \" + message.text}</ListItemText>\n        <ListItemText>         \n            {Math.floor((Date.now()-message.time)/60000) + \" minutes ago\"}\n        </ListItemText>\n      </ListItem>\n    ));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>AnonChat</h1>\n        <SendMessage sendmessage />\n        <List>{this.renderMessages()}</List>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}